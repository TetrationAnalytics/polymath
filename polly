#!/usr/bin/env bash
set -o nounset # -u exit the script if an uninitialized variable is used
set -o pipefail

if [ "${DEBUG:-false}" = "true" ]; then
    set -o xtrace # -x turn on bash tracing
fi

CHEFDK_TARGET_VERSION=3.0.36
CHEF_WORKSTATION_TARGET_VERSION=0.1.120
CHEF_SUPERMARKET=${CHEF_SUPERMARKET:-https://supermarket.ocean.af}

usage() {
    echo "usage: $(basename $0) <cookbook::recipe> [path_to_optional_environment_file]"
    echo "       $(basename $0) chefdk - Install ChefDK"
    echo "       $(basename $0) nukechefdk - Remove ChefDK"
    echo "       $(basename $0) chef - Install Chef Workstation"
    echo "       $(basename $0) nukechef - Remove Chef Workstation"
}

uninstall_chefdk_mac() {
    chefdk_installed_version=$(chef --version 2>/dev/null | awk '/Chef Development Kit Version:/ {print $NF}')
    if [ "${chefdk_installed_version}" != "" ]; then
        echo "==> Uninstalling ChefDK ${chefdk_installed_version} on macOS..."
        sudo rm -rf /opt/chefdk
        sudo pkgutil --forget com.getchef.pkg.chefdk
        sudo find /usr/bin /usr/local/bin -lname '/opt/chefdk/*' -delete
        rm -rf ~/.chefdk
    else
        echo "==> ChefDK is not installed, skipping"
    fi
}

uninstall_chefdk_linux() {
    chefdk_installed_version=$(chef --version 2>/dev/null | awk '/Chef Development Kit Version:/ {print $NF}')
    if [ "${chefdk_installed_version}" != "" ]; then
        distro==$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
        if [[ $distro =~ redhat|centos ]]; then 
            chefdk_package=$(rpm -qa *chefdk*)
            echo "==> Uninstalling ChefDK ${chefdk_package} on CentOS..."
            if ! command -v sudo >/dev/null 2>&1; then
                yum remove -y ${chefdk_package}
            else
                sudo yum remove -y ${chefdk_package}
            fi
        elif [[ $distro =~ debian ]]; then
            chefdk_package=chefdk
            echo "==> Uninstalling ChefDK ${chefdk_package} on Ubuntu..."
            if ! command -v sudo >/dev/null 2>&1; then
                dpkg -P "${chefdk_package}"
            else
                sudo dpkg -P "${chefdk_package}"
            fi
        fi
    else
        echo "==> ChefDK is not installed, skipping"
    fi
}

uninstall_chefdk() {
    if [ "$(uname)" = "Darwin" ]; then
        uninstall_chefdk_mac
    elif [ "$(uname)" = "Linux" ]; then
        uninstall_chefdk_linux
    fi
}

install_chefdk_mac() {
    chefdk_installed_version=$(chef --version 2>/dev/null | awk '/Chef Development Kit Version:/ {print $NF}')
    case "${chefdk_installed_version}" in
        "${CHEFDK_TARGET_VERSION}")
            echo "==> ChefDK ${CHEFDK_TARGET_VERSION} is already installed, skipping"
            INSTALL_CHEFDK=0;;
        "")
            # ChefDK is not installed
            INSTALL_CHEFDK=1;;
        *)
            echo "==> Replacing ChefDK ${chefdk_installed_version} with ${CHEFDK_TARGET_VERSION}"
            uninstall_chefdk
            INSTALL_CHEFDK=1;;
    esac
    if [[ "${INSTALL_CHEFDK}" -eq 1 ]]; then
        echo "==> Installing ChefDK ${CHEFDK_TARGET_VERSION}"
        curl --silent --show-error https://omnitruck.chef.io/install.sh | \
          sudo -E bash -s -- -c stable -P chefdk -v ${CHEFDK_TARGET_VERSION}
    fi
}

install_chefdk_linux() {
    chefdk_installed_version=$(chef --version 2>/dev/null | awk '/Chef Development Kit Version:/ {print $NF}')
    case "${chefdk_installed_version}" in
        "${CHEFDK_TARGET_VERSION}")
            echo "==> ChefDK ${CHEFDK_TARGET_VERSION} is already installed, skipping"
            INSTALL_CHEFDK=0;;
        "")
            # ChefDK is not installed
            INSTALL_CHEFDK=1;;
        *)
            echo "==> Replacing ChefDK ${chefdk_installed_version} with ${CHEFDK_TARGET_VERSION}"
            uninstall_chefdk
            INSTALL_CHEFDK=1;;
    esac
    if [[ "${INSTALL_CHEFDK}" -eq 1 ]]; then
        echo "==> Installing ChefDK ${CHEFDK_TARGET_VERSION}"
        if [[ $EUID -ne 0 ]]; then
            curl --silent --show-error https://omnitruck.chef.io/install.sh | \
              sudo -E bash -s -- -c stable -P chefdk -v ${CHEFDK_TARGET_VERSION}
        else
            curl --silent --show-error https://omnitruck.chef.io/install.sh | \
              bash -s -- -c stable -P chefdk -v ${CHEFDK_TARGET_VERSION}
        fi
    fi
}

install_chefdk() {
    if [ "$(uname)" = "Darwin" ]; then
        install_chefdk_mac
    elif [ "$(uname)" = "Linux" ]; then
        install_chefdk_linux
    fi
}

uninstall_chef_workstation_mac() {
    chef_workstation_installed_version=$(chefx --version 2>/dev/null | awk '{print $NF}')
    if [ "${chef_workstation_installed_version}" != "" ]; then
        echo "==> Uninstalling Chef Workstation ${chef_workstation_installed_version} on macOS..."
        sudo rm -rf /opt/chef-workstation
        sudo pkgutil --forget com.getchef.pkg.chef-workstation
        sudo find /usr/bin /usr/local/bin -lname '/opt/chef-workstation/*' -delete
        rm -rf ~/.chef-workstation
    else
        echo "==> Chef Workstation is not installed, skipping"
    fi
}

uninstall_chef_workstation_linux() {
    chef_workstation_installed_version=$(chefx --version 2>/dev/null | awk '{print $NF}')
    if [ "${chef_workstation_installed_version}" != "" ]; then
        distro==$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
        if [[ $distro =~ redhat|centos ]]; then
            chef_workstation_package=$(rpm -qa *chef-workstation*)
            echo "==> Uninstalling Chef Workstation ${chef_workstation_package} on CentOS..."
            if ! command -v sudo >/dev/null 2>&1; then
                yum remove -y ${chef_workstation_package}
            else
                sudo yum remove -y ${chef_workstation_package}
            fi
        elif [[ $distro =~ debian ]]; then
            chef_workstation_package=chef-workstation
            echo "==> Uninstalling Chef Workstation ${chef_workstation_package} on Ubuntu..."
            if ! command -v sudo >/dev/null 2>&1; then
                dpkg -P ${chef_workstation_package}
            else
                dpkg -P ${chef_workstation_package}
            fi
        fi
    else
        echo "==> Chef Workstation is not installed, skipping"
    fi
}

uninstall_chef_workstation() {
    if [ "$(uname)" = "Darwin" ]; then
        uninstall_chef_workstation_mac
    elif [ "$(uname)" = "Linux" ]; then
        uninstall_chef_workstation_linux
    fi
}

install_chef_workstation_mac() {
    chef_workstation_installed_version=$(chefx --version 2>/dev/null | awk '{print $NF}')
    case "${chef_workstation_installed_version}" in
        "${CHEF_WORKSTATION_TARGET_VERSION}")
            echo "==> Chef Workstation ${CHEF_WORKSTATION_TARGET_VERSION} is already installed, skipping"
            INSTALL_CHEF_WORKSTATION=0;;
        "")
            # Chef Workstation is not installed
            INSTALL_CHEF_WORKSTATION=1;;
        *)
            echo "==> Replacing Chef Workstation ${chef_workstation_installed_version} with ${CHEF_WORKSTATION_TARGET_VERSION}"
            uninstall_chef_workstation
            INSTALL_CHEF_WORKSTATION=1;;
    esac
    if [[ "${INSTALL_CHEF_WORKSTATION}" -eq 1 ]]; then
        echo "==> Installing Chef Workstation ${CHEFDK_TARGET_VERSION}"
        curl --silent --show-error https://omnitruck.chef.io/install.sh | \
          sudo -E bash -s -- -c stable -P chef-workstation -v ${CHEF_WORKSTATION_TARGET_VERSION}
        mkdir -p "$HOME/.chef-workstation"
        cat > "$HOME/.chef-workstation/config.toml" <<EOF;
[telemetry]
enable=false
EOF
    fi
}

install_chef_workstation_linux() {
    chef_workstation_installed_version=$(chefx --version 2>/dev/null | awk '{print $NF}')
    case "${chef_workstation_installed_version}" in
        "${CHEF_WORKSTATION_TARGET_VERSION}")
            echo "==> Chef Workstation ${CHEF_WORKSTATION_TARGET_VERSION} is already installed, skipping"
            INSTALL_CHEF_WORKSTATION=0;;
        "")
            # ChefDK is not installed
            INSTALL_CHEF_WORKSTATION=1;;
        *)
            echo "==> Replacing Chef Workstation ${chef_workstation_installed_version} with ${CHEF_WORKSTATION_TARGET_VERSION}"
            uninstall_chefdk
            INSTALL_CHEF_WORKSTATION=1;;
    esac
    if [[ "${INSTALL_CHEF_WORKSTATION}" -eq 1 ]]; then
        echo "==> Installing Chef Workstation ${CHEF_WORKSTATION_TARGET_VERSION}"
        if [[ $EUID -ne 0 ]]; then
            curl --silent --show-error https://omnitruck.chef.io/install.sh | \
              sudo -E bash -s -- -c stable -P chef-workstation -v ${CHEF_WORKSTATION_TARGET_VERSION}
        else
            curl --silent --show-error https://omnitruck.chef.io/install.sh | \
              bash -s -- -c stable -P chef-workstation -v ${CHEF_WORKSTATION_TARGET_VERSION}
        fi
        mkdir -p "$HOME/.chef-workstation"
        cat > "$HOME/.chef-workstation/config.toml" <<EOF;
[telemetry]
enable=false
EOF
    fi
}

install_chef_workstation() {
    if [ "$(uname)" = "Darwin" ]; then
        install_chef_workstation_mac
    elif [ "$(uname)" = "Linux" ]; then
        install_chef_workstation_linux
    fi
}

generate_berksfile() {
    berksfile=$1
    cat > "${berksfile}" <<EOF;
source '${CHEF_SUPERMARKET}'

EOF

    # Parse the run_list in the form: COOKBOOK::RECIPE or
    # recipe[COOKBOOK:RECIPE]
    # Multiple recipes are comma-delimited
    # 'recipe[COOKBOOK::RECIPE],recipe[COOKBOOK:RECIPE],COOKBOOK::RECIPE'
    parse_run_list=run_list
    IFS=',' read -ra parse_run_list <<< "${run_list}"
    for cookbook in "${parse_run_list[@]}"; do
        regex="recipe\[(.*)::(.*)\]"
        if [[ $cookbook =~ $regex ]]
        then
            # Do not add a cookbook name if already present
            if ! grep -Fq "${BASH_REMATCH[1]}" "${berksfile}"
            then
                echo "cookbook '${BASH_REMATCH[1]}'" >> "${berksfile}"
            fi    
        else
            # Do not add a cookbook name if already present
            if ! grep -Fq "${cookbook%::*}" "${berksfile}"
            then
                # Truncate everything after ::
                echo "cookbook '${cookbook%::*}'" >> "${berksfile}"
            fi    
        fi
    done
}

notify() {
  # format message as a code block ```${msg}```
  slack_message="\`\`\`$1\`\`\`"

  if [ ! -z ${SLACK_URL+x} ]; then
    curl -X POST --data "payload={\"text\": \"${slack_message}\"}" ${SLACK_URL}
  fi
}

cleanup() {
  echo '==> Cleaning up...'
  if [[ $EUID -ne 0 ]]; then
      sudo rm -rf \"${temp_install_dir}\""
  else
      rm -rf \"${temp_install_dir}\""
  fi    
}

args() {
    if [ $# -lt 1 ]; then
        usage
        exit 1
    fi

    if [ "${1}" = "nukechef" ]; then
        uninstall_chef_workstation
        exit 0
    elif [ "${1}" = "chef" ]; then
        install_chef_workstation
        exit 0
    elif [ "${1}" = "nukechefdk" ]; then
        uninstall_chefdk
        exit 0
    elif [ "${1}" = "chefdk" ]; then
        install_chefdk
        exit 0
    fi

    run_list=${1}
    environment_file=${2:-}
    environment_parm=${2:-}
    if [[ -n ${environment_file} ]]; then
        if [ ! -f ${environment_file} ]; then
            environment_file="${environment_file}.json"
            if [ ! -f ${environment_file} ]; then
                echo "$(basename $): Invalid json attributes file ${environment_file}"
                exit 127
            fi
        fi
        # Get filename without extension
        environment_filename="${environment_file##*/}"
        environment_filename_without_extension="${environment_filename%.*}"
        environment_parm=" --environment ${environment_filename_without_extension}"
    fi
}

# Main

args "$@"

clear

temp_install_dir=$(mktemp -d -t polly.XXXXX)
trap cleanup EXIT

cat <<EOF;
Polymath 0.1 - Reconstitute machine configs from scripts
--------------------------------------------------------
EOF

notify "Starting Chef run on $(hostname) with ${run_list}"
T="$(date +%s)"

install_chefdk

echo "==> Cleaning up old cache files"
sudo rm -rf /root/.chef/local-mode-cache
sudo rm -rf ~/.berkshelf

generate_berksfile "${temp_install_dir}/Berksfile"
cat "${temp_install_dir}/Berksfile"

echo "==> Downloading cookbook dependencies from Supermarket"
chef exec berks vendor "${temp_install_dir}/berks-cookbooks" --berksfile="${temp_install_dir}/Berksfile"

# Secrets need to go alongside cookbooks with Chef local mode
if [ ! -z ${SECRET_STORE_URL+x} ]; then
    echo "==> Downloading secret store"
    rm -rf "${temp_install_dir}/secret_store"
    curl -Lo "${temp_install_dir}/secret_store.tgz" "${SECRET_STORE_URL}"
    mkdir -p "${temp_install_dir}/secret_store"
    tar xvf "${temp_install_dir}/secret_store.tgz" -C "${temp_install_dir}/secret_store" --strip 1
    cp -R "${temp_install_dir}/secret_store/data_bags/" "${temp_install_dir}/data_bags/"
    rm -rf "${temp_install_dir}/secret_store"
fi

if [ -f "${environment_file}" ]
then
    echo "==> Copying environment file ${environment_file} to ${temp_install_dir}/environments"
    mkdir -p "${temp_install_dir}/environments"
    cp "${environment_file}" "${temp_install_dir}/environments/"
fi

echo "==> Running chef-client in local mode"
set -x
if [[ -z "${environment_parm}" ]]; then
sudo -E chef exec chef-client --local-mode --log_level error --config-option cookbook_path="${temp_install_dir}/berks-cookbooks" --override-runlist ${run_list}
else
sudo -E chef exec chef-client --local-mode --log_level error --config-option cookbook_path="${temp_install_dir}/berks-cookbooks" --override-runlist ${run_list} ${environment_parm}
fi
T="$(($(date +%s)-T))"
notify "Chef run complete on $(hostname) exit_status=$?, elapsed time ${T} seconds"
